1//-  Створити функцію конструктор для об'єкту який описує теги
// Властивості
//  -назва тегу
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru
//
//  Таким чином описати теги
//  -a
//  -div
//  -h1
//  -span
//  -input
//  -form
//  -option
//  -select
//
// function Tags (name, description, attributes = [{titleOfAttr}, {actionOfAtt}]){
//         this.name = name;
//         this.description = description;
//         this.attributes = attributes;
//
// }
//
// const a = new Tags('a', 'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.',
//     [{
//         titleOfAttr: 'accersskey',
//         actionOfAtt: 'Активация ссылки с помощью комбинации клавиш'
//     }, {
//         titleOfAttr: 'coords',
//         actionOfAtt: 'Устанавливает координаты активной области'
//     }]);
// console.log(a);
// const div = new Tags('div', 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
//     [{
//         titleOfAttr: 'align',
//         actionOfAtt: 'Задает выравнивание содержимого тега <div>.'
//     }, {
//         titleOfAttr: 'title',
//         actionOfAtt: 'Добавляет всплывающую подсказку к содержимому'
//     }]);
// console.log(div);
// const h1 = new Tags('h1', 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.',
//     [{
//         titleOfAttr: 'align',
//         actionOfAtt: 'Определяет выравнивание заголовка'
//     }, {
//         titleOfAttr: 'class',
//         actionOfAtt: 'Задає клас для звернення'
//     }]);
// console.log(h1);
// const span = new Tags('span', 'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль.',
//     [{
//         titleOfAttr: 'contenteditable',
//         actionOfAtt: 'Сообщает, что элемент доступен для редактирования пользователем'
//     }, {
//         titleOfAttr: 'contextmenu',
//         actionOfAtt: 'Добавляет всплывающую подсказку к содержимому'
//     }]);
// console.log(span);
// const input = new Tags('input', 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, различных кнопок, переключателей и флажков.',
//     [{
//         titleOfAttr: 'accept',
//         actionOfAtt: 'Устанавливает фильтр на типы файлов, которые вы можете отправить через поле загрузки файлов'
//     }, {
//         titleOfAttr: 'alt',
//         actionOfAtt: 'Альтернативный текст для кнопки с изображением'
//     }]);
// console.log(input);
// const form = new Tags('form', 'Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению.',
//     [{
//         titleOfAttr: 'accept-charset',
//         actionOfAtt: 'Устанавливает кодировку, в которой сервер может принимать и обрабатывать данные'
//     }, {
//         titleOfAttr: 'action',
//         actionOfAtt: 'Адрес программы или документа, который обрабатывает данные формы'
//     }]);
// console.log(form);
// const option = new Tags('option', 'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей.',
//     [{
//         titleOfAttr: 'disabled',
//         actionOfAtt: 'Заблокировать для доступа элемент списка'
//     }, {
//         titleOfAttr: 'label',
//         actionOfAtt: 'Указание метки пункта списка'
//     }]);
// console.log(option);
// const select = new Tags('select', 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, который устанавливает высоту списка.',
//     [{
//         titleOfAttr: 'required',
//         actionOfAtt: 'Список обязателен для выбора перед отправкой формы'
//     }, {
//         titleOfAttr: 'name',
//         actionOfAtt: 'Имя элемента для отправки на сервер или обращения через скрипты'
//     }]);
// console.log(select);
2//-  Створити класс  для об'єкту який описує теги
// Властивості
// -назва тегу
// - опис його дій
// - масив з атрибутами (2-3 атрибути максимум)
// Кожен атрибут описати як окремий який буде містити
// -назву атрибуту
// -опис дії атрибуту
// інформацію брати з htmlbook.ru
//
// Таким чином описати теги
// -a
// -div
// -h1
// -span
// -input
// -form
// -option
// -select
//
// class Tags {
//     constructor(name, description, attributes = [{titleOfAttr}, {actionOfAtt}]) {
//         this.name = name;
//         this.description = description;
//         this.attributes = attributes;
//     }
// }
//
// const a = new Tags('a', 'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.',
//     [{
//         titleOfAttr: 'accersskey',
//         actionOfAtt: 'Активация ссылки с помощью комбинации клавиш'
//     }, {
//         titleOfAttr: 'coords',
//         actionOfAtt: 'Устанавливает координаты активной области'
//     }]);
// console.log(a);
// const div = new Tags('div', 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
//     [{
//         titleOfAttr: 'align',
//         actionOfAtt: 'Задает выравнивание содержимого тега <div>.'
//     }, {
//         titleOfAttr: 'title',
//         actionOfAtt: 'Добавляет всплывающую подсказку к содержимому'
//     }]);
// console.log(div);
// const h1 = new Tags('h1', 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.',
//     [{
//         titleOfAttr: 'align',
//         actionOfAtt: 'Определяет выравнивание заголовка'
//     }, {
//         titleOfAttr: 'class',
//         actionOfAtt: 'Задає клас для звернення'
//     }]);
// console.log(h1);
// const span = new Tags('span', 'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль.',
//     [{
//         titleOfAttr: 'contenteditable',
//         actionOfAtt: 'Сообщает, что элемент доступен для редактирования пользователем'
//     }, {
//         titleOfAttr: 'contextmenu',
//         actionOfAtt: 'Добавляет всплывающую подсказку к содержимому'
//     }]);
// console.log(span);
// const input = new Tags('input', 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, различных кнопок, переключателей и флажков.',
//     [{
//         titleOfAttr: 'accept',
//         actionOfAtt: 'Устанавливает фильтр на типы файлов, которые вы можете отправить через поле загрузки файлов'
//     }, {
//         titleOfAttr: 'alt',
//         actionOfAtt: 'Альтернативный текст для кнопки с изображением'
//     }]);
// console.log(input);
// const form = new Tags('form', 'Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению.',
//     [{
//         titleOfAttr: 'accept-charset',
//         actionOfAtt: 'Устанавливает кодировку, в которой сервер может принимать и обрабатывать данные'
//     }, {
//         titleOfAttr: 'action',
//         actionOfAtt: 'Адрес программы или документа, который обрабатывает данные формы'
//     }]);
// console.log(form);
// const option = new Tags('option', 'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей.',
//     [{
//         titleOfAttr: 'disabled',
//         actionOfAtt: 'Заблокировать для доступа элемент списка'
//     }, {
//         titleOfAttr: 'label',
//         actionOfAtt: 'Указание метки пункта списка'
//     }]);
// console.log(option);
// const select = new Tags('select', 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, который устанавливает высоту списка.',
//     [{
//         titleOfAttr: 'required',
//         actionOfAtt: 'Список обязателен для выбора перед отправкой формы'
//     }, {
//         titleOfAttr: 'name',
//         actionOfAtt: 'Имя элемента для отправки на сервер или обращения через скрипты'
//     }]);
// console.log(select);
3//-- Створити об'єкт car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
//
let car = {
    manufacturer: 'BMW',
    model: 'M5',
    year: 2006,
    maxSpeed: 250,
    capacity: 5.0,
    drive: function () {
        console.log(`їдемо зі швидкістю ${this.maxSpeed} км/год`);
    },
    info: function () {
        console.log(car);
    },
    increaseMaxSpeed: function (newSpeed = 400) {
        this.maxSpeed = newSpeed
    },
    change: function (newValue = 2010) {
        this.year = newValue
    },
    addDriver: function (driver) {

        this.driver = driver;
    }
}

car.drive()
car.info()
car.increaseMaxSpeed()
car.change()
car.addDriver( {
    name: 'Stig',
    age: 40,
    experience: 22,
});
car.info()

